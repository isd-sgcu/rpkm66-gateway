definitions:
  dto.BadReqErrResponse:
    properties:
      failed_field:
        type: string
      message:
        type: string
      value: {}
    type: object
  dto.CheckinConfirmRequest:
    properties:
      token:
        type: string
    type: object
  dto.CheckinVerifyRequest:
    properties:
      event_type:
        example: 1
        type: integer
    type: object
  dto.CheckinVerifyResponse:
    properties:
      checkin_token:
        example: ec5b9355-0b6c-11ed-b88b-0250cf8509e4
        type: string
      checkin_type:
        example: 1
        type: integer
    type: object
  dto.ConfirmEstampRequest:
    properties:
      event_id:
        example: ec5b9355-0b6c-11ed-b88b-0250cf8509e4
        type: string
    type: object
  dto.Credential:
    properties:
      access_token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL3BiZX...
        type: string
      expires_in:
        example: 3600
        type: integer
      refresh_token:
        example: e7e84d54-7518-4...
        type: string
    type: object
  dto.FileResponse:
    properties:
      url:
        example: file-example.jpg-6b86b273ff34fce19d6b804eff5a3f5747ada4eaa22f1d49c01e52ddb7875b4b
        type: string
    type: object
  dto.RedeemNewToken:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.ResponseBadRequestErr:
    properties:
      data:
        items:
          $ref: '#/definitions/dto.BadReqErrResponse'
        type: array
      message:
        example: Invalid request body
        type: string
      status_code:
        example: 400
        type: integer
    type: object
  dto.ResponseForbiddenErr:
    properties:
      data: {}
      message:
        example: Insufficiency permission
        type: string
      status_code:
        example: 403
        type: integer
    type: object
  dto.ResponseGatewayTimeoutErr:
    properties:
      data: {}
      message:
        example: Connection timeout
        type: string
      status_code:
        example: 504
        type: integer
    type: object
  dto.ResponseInternalErr:
    properties:
      data: {}
      message:
        example: Internal service error
        type: string
      status_code:
        example: 500
        type: integer
    type: object
  dto.ResponseNotfoundErr:
    properties:
      data: {}
      message:
        example: Not found
        type: string
      status_code:
        example: 404
        type: integer
    type: object
  dto.ResponseServiceDownErr:
    properties:
      data: {}
      message:
        example: Service is down
        type: string
      status_code:
        example: 503
        type: integer
    type: object
  dto.ResponseUnauthorizedErr:
    properties:
      data: {}
      message:
        example: Invalid token
        type: string
      status_code:
        example: 401
        type: integer
    type: object
  dto.SelectBaan:
    properties:
      baans:
        items:
          type: string
        type: array
    required:
    - baans
    type: object
  dto.UpdateUserDto:
    properties:
      allergy_food:
        type: string
      allergy_medicine:
        type: string
      disease:
        type: string
      email:
        type: string
      firstname:
        type: string
      food_restriction:
        type: string
      lastname:
        type: string
      line_id:
        type: string
      nickname:
        type: string
      phone:
        type: string
      title:
        type: string
    type: object
  dto.UserDto:
    properties:
      allergy_food:
        type: string
      allergy_medicine:
        type: string
      can_select_baan:
        type: boolean
      disease:
        type: string
      email:
        type: string
      firstname:
        type: string
      food_restriction:
        type: string
      group_id:
        type: string
      id:
        type: string
      lastname:
        type: string
      line_id:
        type: string
      nickname:
        type: string
      phone:
        type: string
      title:
        type: string
    required:
    - can_select_baan
    - firstname
    - lastname
    - line_id
    - nickname
    - phone
    - title
    type: object
  dto.Verify:
    properties:
      hcert:
        type: string
    required:
    - hcert
    type: object
  dto.VerifyEstampRequest:
    properties:
      event_id:
        example: ec5b9355-0b6c-11ed-b88b-0250cf8509e4
        type: string
    type: object
  dto.VerifyTicket:
    properties:
      ticket:
        type: string
    required:
    - ticket
    type: object
  proto.Baan:
    properties:
      descriptionEN:
        type: string
      descriptionTH:
        type: string
      facebook:
        type: string
      facebookUrl:
        type: string
      id:
        type: string
      imageUrl:
        type: string
      instagram:
        type: string
      instagramUrl:
        type: string
      line:
        type: string
      lineUrl:
        type: string
      nameEN:
        type: string
      nameTH:
        type: string
      size:
        type: integer
    type: object
  proto.BaanInfo:
    properties:
      id:
        type: string
      imageUrl:
        type: string
      nameEN:
        type: string
      nameTH:
        type: string
    type: object
  proto.CheckinConfirmResponse:
    properties:
      success:
        type: boolean
    type: object
  proto.ConfirmEstampResponse:
    type: object
  proto.Credential:
    properties:
      accessToken:
        type: string
      expiresIn:
        type: integer
      refreshToken:
        type: string
    type: object
  proto.Event:
    properties:
      code:
        type: string
      descriptionEN:
        type: string
      descriptionTH:
        type: string
      id:
        type: string
      imageURL:
        type: string
      nameEN:
        type: string
      nameTH:
        type: string
    type: object
  proto.FindAllEventWithTypeResponse:
    properties:
      event:
        items:
          $ref: '#/definitions/proto.Event'
        type: array
    type: object
  proto.FindByTokenGroupResponse:
    properties:
      id:
        type: string
      leader:
        $ref: '#/definitions/proto.UserInfo'
      token:
        type: string
    type: object
  proto.FindEventByIDResponse:
    properties:
      event:
        $ref: '#/definitions/proto.Event'
    type: object
  proto.GetUserEstampResponse:
    properties:
      eventList:
        items:
          $ref: '#/definitions/proto.Event'
        type: array
    type: object
  proto.Group:
    properties:
      baans:
        items:
          $ref: '#/definitions/proto.BaanInfo'
        type: array
      id:
        type: string
      leaderID:
        type: string
      members:
        items:
          $ref: '#/definitions/proto.UserInfo'
        type: array
      token:
        type: string
    type: object
  proto.User:
    properties:
      allergyFood:
        type: string
      allergyMedicine:
        type: string
      baanId:
        type: string
      canSelectBaan:
        type: boolean
      disease:
        type: string
      email:
        type: string
      faculty:
        type: string
      firstname:
        type: string
      foodRestriction:
        type: string
      id:
        type: string
      imageUrl:
        type: string
      isGotTicket:
        type: boolean
      isVerify:
        type: boolean
      lastname:
        type: string
      lineID:
        type: string
      nickname:
        type: string
      phone:
        type: string
      studentID:
        type: string
      title:
        type: string
      year:
        type: string
    type: object
  proto.UserInfo:
    properties:
      firstname:
        type: string
      id:
        type: string
      imageUrl:
        type: string
      lastname:
        type: string
    type: object
  proto.VerifyTicketResponse:
    properties:
      credential:
        $ref: '#/definitions/proto.Credential'
    type: object
info:
  contact:
    email: sd.team.sgcu@gmail.com
    name: ISD Team
  description: |-
    # RNKM API
    This is the documentation for https://freshersfairs.com
  title: RNKM Backend
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      description: Check is service heath is ok
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: health check
      tags:
      - health check
  /auth/me:
    get:
      consumes:
      - application/json
      description: Return the user dto if successfully
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/proto.User'
        "401":
          description: Invalid token
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "503":
          description: Service is down
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Check user status and user info
      tags:
      - auth
  /auth/refreshToken:
    post:
      consumes:
      - application/json
      description: Return the credentials if successfully
      parameters:
      - description: refresh token dto
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dto.RedeemNewToken'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Credential'
        "400":
          description: Invalid request body
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Invalid refresh token
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "500":
          description: Internal service error
          schema:
            $ref: '#/definitions/dto.ResponseInternalErr'
        "503":
          description: Service is down
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      summary: Redeem new token
      tags:
      - auth
  /auth/verify:
    post:
      consumes:
      - application/json
      description: Return the credential if successfully
      parameters:
      - description: refresh token dto
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyTicket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Credential'
        "500":
          description: Internal service error
          schema:
            $ref: '#/definitions/dto.ResponseInternalErr'
        "503":
          description: Service is down
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Verify ticket and get credential
      tags:
      - auth
  /baan:
    get:
      consumes:
      - application/json
      description: Return the array of baan dto if successfully
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/proto.Baan'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Get all baans
      tags:
      - baan
  /baan/{id}:
    get:
      consumes:
      - application/json
      description: Return the baan dto if successfully
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.Baan'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Get the baan data by id
      tags:
      - baan
  /baan/user:
    get:
      consumes:
      - application/json
      description: Return the baan dto if successfully
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.Baan'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Get the user's baan
      tags:
      - baan
  /estamp:
    get:
      description: Get get all event with the given type
      parameters:
      - description: id
        in: query
        name: eventType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.FindAllEventWithTypeResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseInternalErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Get all event by type
      tags:
      - event
  /estamp/{id}:
    get:
      consumes:
      - application/json
      description: Get detail of event using event id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.FindEventByIDResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseInternalErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Get event detail
      tags:
      - event
  /estamp/user:
    get:
      consumes:
      - application/json
      description: Get estamp id overview on what user has *Return {} with success
        status code if user has no estamp
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.GetUserEstampResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseInternalErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Get user estamp
      tags:
      - event
  /file/upload:
    post:
      consumes:
      - multipart/form-data
      description: Return the filename if successfully
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.FileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
        "504":
          description: Gateway Timeout
          schema:
            $ref: '#/definitions/dto.ResponseGatewayTimeoutErr'
      security:
      - AuthToken: []
      summary: Upload the image
      tags:
      - file
  /group:
    get:
      consumes:
      - application/json
      description: Return the group dto if successfully
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.Group'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Get the group data
      tags:
      - group
  /group/{token}:
    get:
      consumes:
      - application/json
      description: Return the group dto if successfully
      parameters:
      - description: token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.FindByTokenGroupResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Get the group data by token
      tags:
      - group
    post:
      consumes:
      - application/json
      description: Return the group dto if successfully
      parameters:
      - description: token
        in: path
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ResponseForbiddenErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Join the existing group
      tags:
      - group
  /group/leave:
    delete:
      consumes:
      - application/json
      description: Return the group dto if successfully
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ResponseForbiddenErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseInternalErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Leave the current group and Create a new group
      tags:
      - group
  /group/members/{member_id}:
    delete:
      consumes:
      - application/json
      description: Return the group dto if successfully
      parameters:
      - description: member_id
        in: path
        name: member_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.Group'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ResponseForbiddenErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Delete member from the group
      tags:
      - group
  /group/select:
    put:
      consumes:
      - application/json
      description: Return nothing if successfully
      parameters:
      - description: Select baan dto
        in: body
        name: selectBaanDto
        required: true
        schema:
          $ref: '#/definitions/dto.SelectBaan'
      produces:
      - application/json
      responses:
        "204":
          description: ""
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ResponseForbiddenErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseInternalErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: select baan for the group (leader only)
      tags:
      - group
  /qr/checkin/confirm:
    post:
      consumes:
      - application/json
      description: Use token to confirm checkin
      parameters:
      - description: Token generated from CheckinVerify
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/dto.CheckinConfirmRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.CheckinConfirmResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ResponseForbiddenErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseInternalErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Confirm Checkin
      tags:
      - QR
  /qr/checkin/verify:
    post:
      consumes:
      - application/json
      description: get token by providing id return object has checkin type as enum
        (not to be confused with event type) 1 is checkin, 2 is checkout
      parameters:
      - description: event type (1 is Main event, 2 is Freshy Night)
        in: body
        name: event_type
        required: true
        schema:
          $ref: '#/definitions/dto.CheckinVerifyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CheckinVerifyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseInternalErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Get Token
      tags:
      - QR
  /qr/estamp/confirm:
    post:
      consumes:
      - application/json
      description: get estamp
      parameters:
      - description: Event id
        in: body
        name: token
        required: true
        schema:
          $ref: '#/definitions/dto.ConfirmEstampRequest'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/proto.ConfirmEstampResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseInternalErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Confirm Estamp
      tags:
      - QR
  /qr/estamp/verify:
    post:
      consumes:
      - application/json
      description: check if estamp exist
      parameters:
      - description: event id
        in: body
        name: event_id
        required: true
        schema:
          $ref: '#/definitions/dto.VerifyEstampRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.FindEventByIDResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseInternalErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: check if estamp exist
      tags:
      - QR
  /qr/ticket:
    post:
      consumes:
      - application/json
      description: check status is user already redeem the ticket
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/proto.VerifyTicketResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ResponseInternalErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Verify the freshmen night
      tags:
      - QR
  /user:
    patch:
      consumes:
      - application/json
      description: Return the user dto if successfully
      parameters:
      - description: user dto
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Update the user data if exists
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Return the user dto if successfully
      parameters:
      - description: User DTO
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/proto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ResponseForbiddenErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Create new user
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Return the user dto if successfully
      parameters:
      - description: user dto
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Create new user if it doesn't exist and Update the user data if exists
      tags:
      - user
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Return the user dto if successfully
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ResponseForbiddenErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      security:
      - AuthToken: []
      summary: Delete the user
      tags:
      - user
    get:
      consumes:
      - application/json
      description: Return the user dto if successfully
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/proto.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseBadRequestErr'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ResponseUnauthorizedErr'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ResponseNotfoundErr'
        "503":
          description: Service Unavailable
          schema:
            $ref: '#/definitions/dto.ResponseServiceDownErr'
      summary: Get the user data by id
      tags:
      - user
  /vaccine/verify:
    post:
      consumes:
      - application/json
      description: Return nothing if success
      parameters:
      - description: verify dto
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.Verify'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: bool
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ResponseForbiddenErr'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ResponseForbiddenErr'
      security:
      - AuthToken: []
      summary: Verify the user status
      tags:
      - vaccine
schemes:
- https
- http
securityDefinitions:
  AuthToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
tags:
- description: Chula SSO documentation
  externalDocs:
    description: Chula SSO documentation
    url: https://account.it.chula.ac.th/wiki/doku.php?id=how_does_it_work
  name: Chula SSO
- description: |-
    # Health Check Tag API Documentation
    **Health Check** functions goes here
  name: health check
- description: |-
    # Vaccine Tag API Documentation
    **Vaccine** functions goes here
  name: vaccine
- description: |-
    # Auth Tag API Documentation
    **Auth** functions goes here
  name: auth
- description: |-
    # User Tag API Documentation
    **User** functions goes here
  name: user
- description: |-
    # File Tag API Documentation
    **File** functions goes here
  name: file
- description: |-
    # Group Tag API Documentation
    **Group** functions goes here
  name: group
- description: |-
    # Baan Tag API Documentation
    **Baan** functions goes here
  name: baan
- description: |-
    # Event Tag API Documentation
    **Event** functions goes here
  name: event
